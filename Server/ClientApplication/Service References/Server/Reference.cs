//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace ClientApplication.Server {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginException", Namespace="http://schemas.datacontract.org/2004/07/Server.Exceptions")]
    public partial class LoginException : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string LoginErrorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginError {
            get {
                return this.LoginErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginErrorField, value) != true)) {
                    this.LoginErrorField = value;
                    this.RaisePropertyChanged("LoginError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenericException", Namespace="http://schemas.datacontract.org/2004/07/Server.Exceptions")]
    public partial class GenericException : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientInfo", Namespace="http://schemas.datacontract.org/2004/07/Server.Serializables")]
    public partial class ClientInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IDField;
        
        private ClientApplication.Server.ClientRole RoleField;
        
        private string SessionIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientApplication.Server.ClientRole Role {
            get {
                return this.RoleField;
            }
            set {
                if ((this.RoleField.Equals(value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIDField, value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRole", Namespace="http://schemas.datacontract.org/2004/07/Server.Serializables")]
    public enum ClientRole : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        user = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        admin = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionType", Namespace="http://schemas.datacontract.org/2004/07/Server.Serializables")]
    public enum TransactionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Buy = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sell = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PermissionDeniedException", Namespace="http://schemas.datacontract.org/2004/07/Server.Exceptions")]
    public partial class PermissionDeniedException : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transaction", Namespace="http://schemas.datacontract.org/2004/07/Server.Serializables")]
    public partial class Transaction : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ClientIDField;
        
        private string ClientNameField;
        
        private int IDField;
        
        private System.Nullable<double> OperationValueField;
        
        private System.Nullable<double> QuantityField;
        
        private ClientApplication.Server.TransactionState StateField;
        
        private string StockTypeField;
        
        private System.Nullable<double> StockValueField;
        
        private System.DateTime TimeField;
        
        private ClientApplication.Server.TransactionType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((this.ClientIDField.Equals(value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> OperationValue {
            get {
                return this.OperationValueField;
            }
            set {
                if ((this.OperationValueField.Equals(value) != true)) {
                    this.OperationValueField = value;
                    this.RaisePropertyChanged("OperationValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientApplication.Server.TransactionState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StockType {
            get {
                return this.StockTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.StockTypeField, value) != true)) {
                    this.StockTypeField = value;
                    this.RaisePropertyChanged("StockType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> StockValue {
            get {
                return this.StockValueField;
            }
            set {
                if ((this.StockValueField.Equals(value) != true)) {
                    this.StockValueField = value;
                    this.RaisePropertyChanged("StockValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientApplication.Server.TransactionType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionState", Namespace="http://schemas.datacontract.org/2004/07/Server.Serializables")]
    public enum TransactionState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute(Value="To Perform")]
        ToPerform = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Performed = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IServiceTcp")]
    public interface IServiceTcp {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceTcp/DoWork", ReplyAction="http://tempuri.org/IServiceTcp/DoWorkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClientApplication.Server.LoginException), Action="http://tempuri.org/IServiceTcp/DoWorkLoginExceptionFault", Name="LoginException", Namespace="http://schemas.datacontract.org/2004/07/Server.Exceptions")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        string EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceTcp/Login", ReplyAction="http://tempuri.org/IServiceTcp/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceTcp/Register", ReplyAction="http://tempuri.org/IServiceTcp/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClientApplication.Server.GenericException), Action="http://tempuri.org/IServiceTcp/RegisterGenericExceptionFault", Name="GenericException", Namespace="http://schemas.datacontract.org/2004/07/Server.Exceptions")]
        System.IAsyncResult BeginRegister(string username, string name, string email, string password, System.AsyncCallback callback, object asyncState);
        
        void EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceTcp/GetSession", ReplyAction="http://tempuri.org/IServiceTcp/GetSessionResponse")]
        System.IAsyncResult BeginGetSession(string username, System.AsyncCallback callback, object asyncState);
        
        ClientApplication.Server.ClientInfo EndGetSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceTcp/NewTransaction", ReplyAction="http://tempuri.org/IServiceTcp/NewTransactionResponse")]
        System.IAsyncResult BeginNewTransaction(ClientApplication.Server.TransactionType Type, double Quantity, string StockType, System.AsyncCallback callback, object asyncState);
        
        void EndNewTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceTcp/NewTransactionBalcon", ReplyAction="http://tempuri.org/IServiceTcp/NewTransactionBalconResponse")]
        System.IAsyncResult BeginNewTransactionBalcon(string ClientEmail, ClientApplication.Server.TransactionType Type, double Quantity, string StockType, System.AsyncCallback callback, object asyncState);
        
        void EndNewTransactionBalcon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceTcp/PerformTransaction", ReplyAction="http://tempuri.org/IServiceTcp/PerformTransactionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClientApplication.Server.GenericException), Action="http://tempuri.org/IServiceTcp/PerformTransactionGenericExceptionFault", Name="GenericException", Namespace="http://schemas.datacontract.org/2004/07/Server.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClientApplication.Server.PermissionDeniedException), Action="http://tempuri.org/IServiceTcp/PerformTransactionPermissionDeniedExceptionFault", Name="PermissionDeniedException", Namespace="http://schemas.datacontract.org/2004/07/Server.Exceptions")]
        System.IAsyncResult BeginPerformTransaction(int id, double stockValue, System.AsyncCallback callback, object asyncState);
        
        void EndPerformTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceTcp/ListTransaction", ReplyAction="http://tempuri.org/IServiceTcp/ListTransactionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClientApplication.Server.GenericException), Action="http://tempuri.org/IServiceTcp/ListTransactionGenericExceptionFault", Name="GenericException", Namespace="http://schemas.datacontract.org/2004/07/Server.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClientApplication.Server.PermissionDeniedException), Action="http://tempuri.org/IServiceTcp/ListTransactionPermissionDeniedExceptionFault", Name="PermissionDeniedException", Namespace="http://schemas.datacontract.org/2004/07/Server.Exceptions")]
        System.IAsyncResult BeginListTransaction(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ClientApplication.Server.Transaction> EndListTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceTcp/ListClientsEmail", ReplyAction="http://tempuri.org/IServiceTcp/ListClientsEmailResponse")]
        System.IAsyncResult BeginListClientsEmail(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndListClientsEmail(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceTcpChannel : ClientApplication.Server.IServiceTcp, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClientApplication.Server.ClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClientApplication.Server.ClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ClientApplication.Server.Transaction> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ClientApplication.Server.Transaction>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListClientsEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListClientsEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceTcpClient : System.ServiceModel.ClientBase<ClientApplication.Server.IServiceTcp>, ClientApplication.Server.IServiceTcp {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSessionDelegate;
        
        private EndOperationDelegate onEndGetSessionDelegate;
        
        private System.Threading.SendOrPostCallback onGetSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginNewTransactionDelegate;
        
        private EndOperationDelegate onEndNewTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onNewTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginNewTransactionBalconDelegate;
        
        private EndOperationDelegate onEndNewTransactionBalconDelegate;
        
        private System.Threading.SendOrPostCallback onNewTransactionBalconCompletedDelegate;
        
        private BeginOperationDelegate onBeginPerformTransactionDelegate;
        
        private EndOperationDelegate onEndPerformTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onPerformTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginListTransactionDelegate;
        
        private EndOperationDelegate onEndListTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onListTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginListClientsEmailDelegate;
        
        private EndOperationDelegate onEndListClientsEmailDelegate;
        
        private System.Threading.SendOrPostCallback onListClientsEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceTcpClient() {
        }
        
        public ServiceTcpClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceTcpClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceTcpClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceTcpClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<DoWorkCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<GetSessionCompletedEventArgs> GetSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NewTransactionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NewTransactionBalconCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PerformTransactionCompleted;
        
        public event System.EventHandler<ListTransactionCompletedEventArgs> ListTransactionCompleted;
        
        public event System.EventHandler<ListClientsEmailCompletedEventArgs> ListClientsEmailCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientApplication.Server.IServiceTcp.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string ClientApplication.Server.IServiceTcp.EndDoWork(System.IAsyncResult result) {
            return base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ClientApplication.Server.IServiceTcp)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            string retVal = ((ClientApplication.Server.IServiceTcp)(this)).EndDoWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new DoWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientApplication.Server.IServiceTcp.BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool ClientApplication.Server.IServiceTcp.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((ClientApplication.Server.IServiceTcp)(this)).BeginLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            bool retVal = ((ClientApplication.Server.IServiceTcp)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        public void LoginAsync(string username, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientApplication.Server.IServiceTcp.BeginRegister(string username, string name, string email, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(username, name, email, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientApplication.Server.IServiceTcp.EndRegister(System.IAsyncResult result) {
            base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            string email = ((string)(inValues[2]));
            string password = ((string)(inValues[3]));
            return ((ClientApplication.Server.IServiceTcp)(this)).BeginRegister(username, name, email, password, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            ((ClientApplication.Server.IServiceTcp)(this)).EndRegister(result);
            return null;
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string username, string name, string email, string password) {
            this.RegisterAsync(username, name, email, password, null);
        }
        
        public void RegisterAsync(string username, string name, string email, string password, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        username,
                        name,
                        email,
                        password}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientApplication.Server.IServiceTcp.BeginGetSession(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSession(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ClientApplication.Server.ClientInfo ClientApplication.Server.IServiceTcp.EndGetSession(System.IAsyncResult result) {
            return base.Channel.EndGetSession(result);
        }
        
        private System.IAsyncResult OnBeginGetSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((ClientApplication.Server.IServiceTcp)(this)).BeginGetSession(username, callback, asyncState);
        }
        
        private object[] OnEndGetSession(System.IAsyncResult result) {
            ClientApplication.Server.ClientInfo retVal = ((ClientApplication.Server.IServiceTcp)(this)).EndGetSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSessionCompleted(object state) {
            if ((this.GetSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSessionCompleted(this, new GetSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSessionAsync(string username) {
            this.GetSessionAsync(username, null);
        }
        
        public void GetSessionAsync(string username, object userState) {
            if ((this.onBeginGetSessionDelegate == null)) {
                this.onBeginGetSessionDelegate = new BeginOperationDelegate(this.OnBeginGetSession);
            }
            if ((this.onEndGetSessionDelegate == null)) {
                this.onEndGetSessionDelegate = new EndOperationDelegate(this.OnEndGetSession);
            }
            if ((this.onGetSessionCompletedDelegate == null)) {
                this.onGetSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSessionCompleted);
            }
            base.InvokeAsync(this.onBeginGetSessionDelegate, new object[] {
                        username}, this.onEndGetSessionDelegate, this.onGetSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientApplication.Server.IServiceTcp.BeginNewTransaction(ClientApplication.Server.TransactionType Type, double Quantity, string StockType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNewTransaction(Type, Quantity, StockType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientApplication.Server.IServiceTcp.EndNewTransaction(System.IAsyncResult result) {
            base.Channel.EndNewTransaction(result);
        }
        
        private System.IAsyncResult OnBeginNewTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClientApplication.Server.TransactionType Type = ((ClientApplication.Server.TransactionType)(inValues[0]));
            double Quantity = ((double)(inValues[1]));
            string StockType = ((string)(inValues[2]));
            return ((ClientApplication.Server.IServiceTcp)(this)).BeginNewTransaction(Type, Quantity, StockType, callback, asyncState);
        }
        
        private object[] OnEndNewTransaction(System.IAsyncResult result) {
            ((ClientApplication.Server.IServiceTcp)(this)).EndNewTransaction(result);
            return null;
        }
        
        private void OnNewTransactionCompleted(object state) {
            if ((this.NewTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NewTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NewTransactionAsync(ClientApplication.Server.TransactionType Type, double Quantity, string StockType) {
            this.NewTransactionAsync(Type, Quantity, StockType, null);
        }
        
        public void NewTransactionAsync(ClientApplication.Server.TransactionType Type, double Quantity, string StockType, object userState) {
            if ((this.onBeginNewTransactionDelegate == null)) {
                this.onBeginNewTransactionDelegate = new BeginOperationDelegate(this.OnBeginNewTransaction);
            }
            if ((this.onEndNewTransactionDelegate == null)) {
                this.onEndNewTransactionDelegate = new EndOperationDelegate(this.OnEndNewTransaction);
            }
            if ((this.onNewTransactionCompletedDelegate == null)) {
                this.onNewTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNewTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginNewTransactionDelegate, new object[] {
                        Type,
                        Quantity,
                        StockType}, this.onEndNewTransactionDelegate, this.onNewTransactionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientApplication.Server.IServiceTcp.BeginNewTransactionBalcon(string ClientEmail, ClientApplication.Server.TransactionType Type, double Quantity, string StockType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNewTransactionBalcon(ClientEmail, Type, Quantity, StockType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientApplication.Server.IServiceTcp.EndNewTransactionBalcon(System.IAsyncResult result) {
            base.Channel.EndNewTransactionBalcon(result);
        }
        
        private System.IAsyncResult OnBeginNewTransactionBalcon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ClientEmail = ((string)(inValues[0]));
            ClientApplication.Server.TransactionType Type = ((ClientApplication.Server.TransactionType)(inValues[1]));
            double Quantity = ((double)(inValues[2]));
            string StockType = ((string)(inValues[3]));
            return ((ClientApplication.Server.IServiceTcp)(this)).BeginNewTransactionBalcon(ClientEmail, Type, Quantity, StockType, callback, asyncState);
        }
        
        private object[] OnEndNewTransactionBalcon(System.IAsyncResult result) {
            ((ClientApplication.Server.IServiceTcp)(this)).EndNewTransactionBalcon(result);
            return null;
        }
        
        private void OnNewTransactionBalconCompleted(object state) {
            if ((this.NewTransactionBalconCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NewTransactionBalconCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NewTransactionBalconAsync(string ClientEmail, ClientApplication.Server.TransactionType Type, double Quantity, string StockType) {
            this.NewTransactionBalconAsync(ClientEmail, Type, Quantity, StockType, null);
        }
        
        public void NewTransactionBalconAsync(string ClientEmail, ClientApplication.Server.TransactionType Type, double Quantity, string StockType, object userState) {
            if ((this.onBeginNewTransactionBalconDelegate == null)) {
                this.onBeginNewTransactionBalconDelegate = new BeginOperationDelegate(this.OnBeginNewTransactionBalcon);
            }
            if ((this.onEndNewTransactionBalconDelegate == null)) {
                this.onEndNewTransactionBalconDelegate = new EndOperationDelegate(this.OnEndNewTransactionBalcon);
            }
            if ((this.onNewTransactionBalconCompletedDelegate == null)) {
                this.onNewTransactionBalconCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNewTransactionBalconCompleted);
            }
            base.InvokeAsync(this.onBeginNewTransactionBalconDelegate, new object[] {
                        ClientEmail,
                        Type,
                        Quantity,
                        StockType}, this.onEndNewTransactionBalconDelegate, this.onNewTransactionBalconCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientApplication.Server.IServiceTcp.BeginPerformTransaction(int id, double stockValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPerformTransaction(id, stockValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientApplication.Server.IServiceTcp.EndPerformTransaction(System.IAsyncResult result) {
            base.Channel.EndPerformTransaction(result);
        }
        
        private System.IAsyncResult OnBeginPerformTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            double stockValue = ((double)(inValues[1]));
            return ((ClientApplication.Server.IServiceTcp)(this)).BeginPerformTransaction(id, stockValue, callback, asyncState);
        }
        
        private object[] OnEndPerformTransaction(System.IAsyncResult result) {
            ((ClientApplication.Server.IServiceTcp)(this)).EndPerformTransaction(result);
            return null;
        }
        
        private void OnPerformTransactionCompleted(object state) {
            if ((this.PerformTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PerformTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PerformTransactionAsync(int id, double stockValue) {
            this.PerformTransactionAsync(id, stockValue, null);
        }
        
        public void PerformTransactionAsync(int id, double stockValue, object userState) {
            if ((this.onBeginPerformTransactionDelegate == null)) {
                this.onBeginPerformTransactionDelegate = new BeginOperationDelegate(this.OnBeginPerformTransaction);
            }
            if ((this.onEndPerformTransactionDelegate == null)) {
                this.onEndPerformTransactionDelegate = new EndOperationDelegate(this.OnEndPerformTransaction);
            }
            if ((this.onPerformTransactionCompletedDelegate == null)) {
                this.onPerformTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPerformTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginPerformTransactionDelegate, new object[] {
                        id,
                        stockValue}, this.onEndPerformTransactionDelegate, this.onPerformTransactionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientApplication.Server.IServiceTcp.BeginListTransaction(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListTransaction(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ClientApplication.Server.Transaction> ClientApplication.Server.IServiceTcp.EndListTransaction(System.IAsyncResult result) {
            return base.Channel.EndListTransaction(result);
        }
        
        private System.IAsyncResult OnBeginListTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ClientApplication.Server.IServiceTcp)(this)).BeginListTransaction(callback, asyncState);
        }
        
        private object[] OnEndListTransaction(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ClientApplication.Server.Transaction> retVal = ((ClientApplication.Server.IServiceTcp)(this)).EndListTransaction(result);
            return new object[] {
                    retVal};
        }
        
        private void OnListTransactionCompleted(object state) {
            if ((this.ListTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListTransactionCompleted(this, new ListTransactionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListTransactionAsync() {
            this.ListTransactionAsync(null);
        }
        
        public void ListTransactionAsync(object userState) {
            if ((this.onBeginListTransactionDelegate == null)) {
                this.onBeginListTransactionDelegate = new BeginOperationDelegate(this.OnBeginListTransaction);
            }
            if ((this.onEndListTransactionDelegate == null)) {
                this.onEndListTransactionDelegate = new EndOperationDelegate(this.OnEndListTransaction);
            }
            if ((this.onListTransactionCompletedDelegate == null)) {
                this.onListTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginListTransactionDelegate, null, this.onEndListTransactionDelegate, this.onListTransactionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientApplication.Server.IServiceTcp.BeginListClientsEmail(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListClientsEmail(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> ClientApplication.Server.IServiceTcp.EndListClientsEmail(System.IAsyncResult result) {
            return base.Channel.EndListClientsEmail(result);
        }
        
        private System.IAsyncResult OnBeginListClientsEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ClientApplication.Server.IServiceTcp)(this)).BeginListClientsEmail(callback, asyncState);
        }
        
        private object[] OnEndListClientsEmail(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((ClientApplication.Server.IServiceTcp)(this)).EndListClientsEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnListClientsEmailCompleted(object state) {
            if ((this.ListClientsEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListClientsEmailCompleted(this, new ListClientsEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListClientsEmailAsync() {
            this.ListClientsEmailAsync(null);
        }
        
        public void ListClientsEmailAsync(object userState) {
            if ((this.onBeginListClientsEmailDelegate == null)) {
                this.onBeginListClientsEmailDelegate = new BeginOperationDelegate(this.OnBeginListClientsEmail);
            }
            if ((this.onEndListClientsEmailDelegate == null)) {
                this.onEndListClientsEmailDelegate = new EndOperationDelegate(this.OnEndListClientsEmail);
            }
            if ((this.onListClientsEmailCompletedDelegate == null)) {
                this.onListClientsEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListClientsEmailCompleted);
            }
            base.InvokeAsync(this.onBeginListClientsEmailDelegate, null, this.onEndListClientsEmailDelegate, this.onListClientsEmailCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ClientApplication.Server.IServiceTcp CreateChannel() {
            return new ServiceTcpClientChannel(this);
        }
        
        private class ServiceTcpClientChannel : ChannelBase<ClientApplication.Server.IServiceTcp>, ClientApplication.Server.IServiceTcp {
            
            public ServiceTcpClientChannel(System.ServiceModel.ClientBase<ClientApplication.Server.IServiceTcp> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DoWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegister(string username, string name, string email, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = username;
                _args[1] = name;
                _args[2] = email;
                _args[3] = password;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Register", _args, result);
            }
            
            public System.IAsyncResult BeginGetSession(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("GetSession", _args, callback, asyncState);
                return _result;
            }
            
            public ClientApplication.Server.ClientInfo EndGetSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                ClientApplication.Server.ClientInfo _result = ((ClientApplication.Server.ClientInfo)(base.EndInvoke("GetSession", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNewTransaction(ClientApplication.Server.TransactionType Type, double Quantity, string StockType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = Type;
                _args[1] = Quantity;
                _args[2] = StockType;
                System.IAsyncResult _result = base.BeginInvoke("NewTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public void EndNewTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("NewTransaction", _args, result);
            }
            
            public System.IAsyncResult BeginNewTransactionBalcon(string ClientEmail, ClientApplication.Server.TransactionType Type, double Quantity, string StockType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = ClientEmail;
                _args[1] = Type;
                _args[2] = Quantity;
                _args[3] = StockType;
                System.IAsyncResult _result = base.BeginInvoke("NewTransactionBalcon", _args, callback, asyncState);
                return _result;
            }
            
            public void EndNewTransactionBalcon(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("NewTransactionBalcon", _args, result);
            }
            
            public System.IAsyncResult BeginPerformTransaction(int id, double stockValue, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = id;
                _args[1] = stockValue;
                System.IAsyncResult _result = base.BeginInvoke("PerformTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPerformTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PerformTransaction", _args, result);
            }
            
            public System.IAsyncResult BeginListTransaction(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ListTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ClientApplication.Server.Transaction> EndListTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ClientApplication.Server.Transaction> _result = ((System.Collections.ObjectModel.ObservableCollection<ClientApplication.Server.Transaction>)(base.EndInvoke("ListTransaction", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginListClientsEmail(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ListClientsEmail", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndListClientsEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("ListClientsEmail", _args, result)));
                return _result;
            }
        }
    }
}
